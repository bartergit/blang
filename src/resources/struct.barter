struct VecInt {
    int start;
    int capacity;
    int size;
}

//func VecInt() -> VecInt{
//    T* start = alloc(sizeof(T) * 4);
//    insta VecInt to_return(start, 4, 0);
//    return to_return;
//}
//
//func push(VecInt vec, T value){
//    if vec.size == vec.capacity {
//        int i = 0;
//        T* start = alloc(vec.size * 2);
//        while i < vec.size {
//            start[i] = vec.start[i];
//            i = i + 1;
//        }
//        vec.capacity = vec.size * 2;
//        free(vec.start);
//        vec.start = start;
//    }
//    vec.start[vec.size] = value;
//    vec.size = vec.size + 1;
//}

//func free(){
//    free(vec.start);
//}
func f(VecInt a) -> VecInt {
    a.start = 228;
    return a;
}

func main() -> int {
    int i = 0;
    int start = 15;
    i = 11;
    VecInt a = @insta(VecInt, start, 4, 0);
    a.size = 322;
    VecInt b = f(a);
    @printf("%d %d %d", b.start, b.capacity, b.size);
    return 0;
}